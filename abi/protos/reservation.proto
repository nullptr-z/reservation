syntax ="proto3";
package reservation;

import "google/protobuf/timestamp.proto";

enum ReservationStatus {
  RESERVATION_STATUS_UNKNOWN =0;
  RESERVATION_STATUS_PENDING =1;
  RESERVATION_STATUS_CONFIRMED =2; // 确认
  RESERVATION_STATUS_BLOCKED =3;
}

enum ReservationUpdateType {
  RESERVATION_UPDATE_TYPE_UNKNOWN =0;
  RESERVATION_UPDATE_TYPE_CREATE =1;
  RESERVATION_UPDATE_TYPE_UPDATE =2;
  RESERVATION_UPDATE_TYPE_DELETE =3;
}

message Reservation {
  string id = 1;
  string resource_id = 2;
  ReservationStatus rtype =3 ;

  // resource reservation window`预留资源窗口
  string user_id = 4;
  google.protobuf.Timestamp start = 5;
  google.protobuf.Timestamp end = 6;

  // extra note`额外说明
  string note =7;
}

message ReserveRequest {
  Reservation reservation =1;
}

message ReserveResponse {
  Reservation reservation =1;
}

message UpdateRequest {
  string note =1;
}

message UpdateResponse {
  Reservation reservation =1;
}

message ConfirmRequest {
  string id =1;
}

message ConfirmResponse{
  Reservation reservation =1;
}

message CancelRequest {
  string id =1;
}

message CancelResponse{
  Reservation reservation =1;
}

message GetRequest {
  int64 id =1;
}

message GetResponse{
  Reservation reservation =1;
}

message QueryRequest {
  string resource_id =1;
  string user_id =2;
  // use status to filter result. If UNKNOWN, return all reservations --如果用户状态未知，返回他的所有预定
  ReservationStatus status =3;
  google.protobuf.Timestamp start = 4;
  google.protobuf.Timestamp end = 5;
}

message ListenRequest {}
message ListenResponse {
  ReservationUpdateType op=1;
  Reservation reservation =2;
}

service ReservationService {
  rpc reserve(ReserveRequest) returns (ReserveRequest);
  rpc confirm(ConfirmRequest) returns (ConfirmResponse);
  rpc update(UpdateRequest) returns (UpdateResponse);
  rpc cancel(CancelRequest) returns (CancelResponse);
  rpc get(GetRequest) returns (GetResponse);
  rpc Query(QueryRequest) returns (stream Reservation);
  rpc listen(ListenRequest) returns (stream Reservation);
}
